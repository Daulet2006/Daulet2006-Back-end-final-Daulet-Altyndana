# API Documentation - ZooStore Backend

This document outlines the available API endpoints for the ZooStore application.

## Authentication (`/auth`)

*   **POST `/auth/register`**
    *   Description: Registers a new user.
    *   Access: Public
    *   Request Body: `{"username": "string", "email": "string", "password": "string", "role": "string (CLIENT, SELLER, VETERINARIAN, ADMIN, OWNER)"}`
    *   Response (201): `{"message": "User registered successfully"}`
    *   Response (400): `{"message": "Invalid data"}` or `{"message": "Email already registered"}`

*   **POST `/auth/login`**
    *   Description: Logs in an existing user.
    *   Access: Public
    *   Request Body: `{"email": "string", "password": "string"}`
    *   Response (200): `{"access_token": "string", "user": {"id": int, "username": "string", "email": "string", "role": "string"}}`
    *   Response (401): `{"message": "Invalid credentials"}`

*   **POST `/auth/logout`**
    *   Description: Logs out the current user (invalidates JWT).
    *   Access: Authenticated (Requires JWT)
    *   Response (200): `{"message": "Successfully logged out"}`

## Categories (`/categories`)

*   **GET `/categories`**
    *   Description: Retrieves a list of all product categories.
    *   Access: Public
    *   Response (200): `[{"id": int, "name": "string", "description": "string"}, ...]`

*   **GET `/categories/<int:category_id>`**
    *   Description: Retrieves details of a specific category.
    *   Access: Public
    *   Response (200): `{"id": int, "name": "string", "description": "string"}`
    *   Response (404): Not Found

*   **POST `/categories`**
    *   Description: Creates a new category.
    *   Access: Authenticated (Admin, Owner)
    *   Request Body: `{"name": "string", "description": "string" (optional)}`
    *   Response (201): `{"message": "Category created successfully", "category": {"id": int, ...}}`
    *   Response (400): `{"message": "Missing required field: name"}`
    *   Response (409): `{"message": "Category with name '...' already exists"}`

*   **PUT/PATCH `/categories/<int:category_id>`**
    *   Description: Updates an existing category.
    *   Access: Authenticated (Admin, Owner)
    *   Request Body: `{"name": "string" (optional), "description": "string" (optional)}`
    *   Response (200): `{"message": "Category updated successfully", "category": {"id": int, ...}}`
    *   Response (400): `{"message": "No data provided for update"}`
    *   Response (404): Not Found
    *   Response (409): `{"message": "Category with name '...' already exists"}`

*   **DELETE `/categories/<int:category_id>`**
    *   Description: Deletes a category.
    *   Access: Authenticated (Admin, Owner)
    *   Response (200): `{"message": "Category deleted successfully"}`
    *   Response (400): `{"message": "Cannot delete category: It is associated with existing products."}`
    *   Response (404): Not Found

## Products (`/products`)

*   **GET `/products`**
    *   Description: Retrieves a list of all products.
    *   Access: Public
    *   Response (200): `[{"id": int, "name": "string", "description": "string", "price": float, "stock": int, "image_url": "string", "seller_id": int, "category_id": int}, ...]`

*   **GET `/products/filter?name=<query>`**
    *   Description: Filters products by name (case-insensitive).
    *   Access: Public
    *   Query Params: `name` (string, required)
    *   Response (200): `[{"id": int, ...}, ...]`
    *   Response (400): `{"message": "Name parameter is required for filtering"}`

*   **GET `/products/<int:product_id>`**
    *   Description: Retrieves details of a specific product.
    *   Access: Public
    *   Response (200): `{"id": int, ...}`
    *   Response (404): Not Found

*   **POST `/products`**
    *   Description: Creates a new product.
    *   Access: Authenticated (Seller, Admin, Owner)
    *   Request Body: `{"name": "string", "price": float, "stock": int, "description": "string" (optional), "image_url": "string" (optional), "category_id": int (optional)}`
    *   Response (201): `{"message": "Product created successfully", "product_id": int}`
    *   Response (400): `{"message": "Missing required fields..."}` or `{"message": "Invalid data format..."}`
    *   Response (404): `{"message": "Category with ID ... not found"}`

*   **PUT/PATCH `/products/<int:product_id>`**
    *   Description: Updates an existing product.
    *   Access: Authenticated (Seller who owns the product, Admin, Owner)
    *   Request Body: `{"name": "string" (optional), "description": "string" (optional), "price": float (optional), "stock": int (optional), "image_url": "string" (optional), "category_id": int (optional)}`
    *   Response (200): `{"message": "Product updated successfully"}`
    *   Response (400): `{"message": "Invalid data format..."}`
    *   Response (403): `{"message": "Permission denied..."}`
    *   Response (404): Product Not Found or `{"message": "Category with ID ... not found"}`

*   **DELETE `/products/<int:product_id>`**
    *   Description: Deletes a product.
    *   Access: Authenticated (Seller who owns the product, Admin, Owner)
    *   Response (200): `{"message": "Product deleted successfully"}`
    *   Response (403): `{"message": "Permission denied..."}`
    *   Response (404): Not Found

## Pets (`/pets`)

*   **GET `/pets`**
    *   Description: Retrieves a list of all pets available for sale.
    *   Access: Public
    *   Response (200): `[{"id": int, "name": "string", "species": "string", "breed": "string", "age": int, "price": float, "description": "string", "image_url": "string", "seller_id": int}, ...]`

*   **GET `/pets/<int:pet_id>`**
    *   Description: Retrieves details of a specific pet.
    *   Access: Public
    *   Response (200): `{"id": int, ...}`
    *   Response (404): Not Found

*   **POST `/pets`**
    *   Description: Creates a new pet listing.
    *   Access: Authenticated (Seller, Admin, Owner)
    *   Request Body: `{"name": "string", "species": "string", "age": int, "price": float, "breed": "string" (optional), "description": "string" (optional), "image_url": "string" (optional)}`
    *   Response (201): `{"message": "Pet created successfully", "pet_id": int}`
    *   Response (400): `{"message": "Missing required fields..."}` or `{"message": "Invalid data format..."}`

*   **PUT/PATCH `/pets/<int:pet_id>`**
    *   Description: Updates an existing pet listing.
    *   Access: Authenticated (Seller who owns the pet, Admin, Owner)
    *   Request Body: `{"name": "string" (optional), "species": "string" (optional), "breed": "string" (optional), "age": int (optional), "price": float (optional), "description": "string" (optional), "image_url": "string" (optional)}`
    *   Response (200): `{"message": "Pet updated successfully"}`
    *   Response (400): `{"message": "Invalid data format..."}`
    *   Response (403): `{"message": "Permission denied..."}`
    *   Response (404): Not Found

*   **DELETE `/pets/<int:pet_id>`**
    *   Description: Deletes a pet listing.
    *   Access: Authenticated (Seller who owns the pet, Admin, Owner)
    *   Response (200): `{"message": "Pet deleted successfully"}`
    *   Response (403): `{"message": "Permission denied..."}`
    *   Response (404): Not Found

## Orders (`/orders`)

*   **GET `/orders`**
    *   Description: Retrieves a list of orders. Clients see their own orders, Admin/Owner see all.
    *   Access: Authenticated (Client, Admin, Owner)
    *   Response (200): `[{"id": int, "client_id": int, "order_date": "isoformat_string", "total_amount": float, "status": "string", "products": [{"id": int, "name": "string", "quantity": int, "price": float}, ...], "pets": [{"id": int, "name": "string", "species": "string", "price": float}, ...]}, ...]`

*   **GET `/orders/<int:order_id>`**
    *   Description: Retrieves details of a specific order.
    *   Access: Authenticated (Client who owns the order, Admin, Owner)
    *   Response (200): `{"id": int, ...}` (See format above)
    *   Response (403): `{"message": "Permission denied"}`
    *   Response (404): Not Found

*   **POST `/orders`**
    *   Description: Creates a new order for products and/or pets.
    *   Access: Authenticated (Client)
    *   Request Body: `{"products": [{"id": int, "quantity": int}, ...] (optional), "pets": [int, ...] (optional)}`
    *   Response (201): `{"message": "Order created successfully", "order_id": int}`
    *   Response (400): `{"message": "Order must contain..."}` or `{"message": "Invalid product/pet data..."}` or `{"message": "Insufficient stock..."}` or `{"message": "Pet ... is already part of an order..."}`
    *   Response (404): `{"message": "Product/Pet with ID ... not found"}`

*   **PUT/PATCH `/orders/<int:order_id>`**
    *   Description: Updates the status of an existing order.
    *   Access: Authenticated (Admin, Owner)
    *   Request Body: `{"status": "string (Pending, Completed, Cancelled)"}`
    *   Response (200): `{"message": "Order updated successfully"}`
    *   Response (400): `{"message": "Invalid status..."}`
    *   Response (404): Not Found

## Vet Appointments (`/appointments`)

*   **GET `/appointments`**
    *   Description: Retrieves a list of vet appointments. Clients/Vets see their own, Admin/Owner see all.
    *   Access: Authenticated (Client, Veterinarian, Admin, Owner)
    *   Response (200): `[{"id": int, "client_id": int, "vet_id": int, "appointment_date": "isoformat_string", "reason": "string", "status": "string", "pet_ids": [int, ...]}, ...]`

*   **GET `/appointments/<int:appointment_id>`**
    *   Description: Retrieves details of a specific vet appointment.
    *   Access: Authenticated (Client/Vet involved in the appointment, Admin, Owner)
    *   Response (200): `{"id": int, ...}` (See format above)
    *   Response (403): `{"message": "Permission denied"}`
    *   Response (404): Not Found

*   **POST `/appointments`**
    *   Description: Creates a new vet appointment.
    *   Access: Authenticated (Client)
    *   Request Body: `{"vet_id": int, "appointment_date": "isoformat_string (YYYY-MM-DDTHH:MM:SS)", "reason": "string", "pet_ids": [int, ...] (optional)}`
    *   Response (201): `{"message": "Appointment created successfully", "appointment_id": int}`
    *   Response (400): `{"message": "Missing required fields..."}` or `{"message": "Invalid date format..."}` or `{"message": "Date must be in the future"}` or `{"message": "pet_ids must be a list..."}`
    *   Response (404): `{"message": "Veterinarian with ID ... not found..."}` or `{"message": "Pet with ID ... not found"}`

*   **PUT/PATCH `/appointments/<int:appointment_id>`**
    *   Description: Updates an existing vet appointment (status, reason, date, pets).
    *   Access: Authenticated (Veterinarian involved, Admin, Owner)
    *   Request Body: `{"status": "string (Scheduled, Completed, Cancelled)" (optional), "reason": "string" (optional), "appointment_date": "isoformat_string" (optional), "pet_ids": [int, ...] (optional)}`
    *   Response (200): `{"message": "Appointment updated successfully"}`
    *   Response (400): `{"message": "Invalid status value..."}` or `{"message": "Invalid date format..."}` or `{"message": "Date must be in the future"}` or `{"message": "pet_ids must be a list..."}`
    *   Response (403): `{"message": "Permission denied"}`
    *   Response (404): Appointment Not Found or `{"message": "Pet with ID ... not found"}`

*   **DELETE `/appointments/<int:appointment_id>`**
    *   Description: Deletes a vet appointment.
    *   Access: Authenticated (Admin, Owner)
    *   Response (200): `{"message": "Appointment deleted successfully"}`
    *   Response (404): Not Found