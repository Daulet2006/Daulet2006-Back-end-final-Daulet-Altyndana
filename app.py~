import os
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
from dotenv import load_dotenv

# Загружаем переменные из .env
load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///zoo_store.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY', 'super-secret')

db = SQLAlchemy(app)
jwt = JWTManager(app)
CORS(app)

# Models
user_pet = db.Table('user_pet',
    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('pet_id', db.Integer, db.ForeignKey('pet.id'))
)

user_product = db.Table('user_product',
    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('product_id', db.Integer, db.ForeignKey('product.id'))
)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    role = db.Column(db.String(20), nullable=False)  # admin, customer, seller, vet
    pets = db.relationship('Pet', secondary=user_pet, backref='owners')
    products = db.relationship('Product', secondary=user_product, backref='buyers')

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(300))
    price = db.Column(db.Float, nullable=False)
    stock = db.Column(db.Integer, nullable=False)
    seller_id = db.Column(db.Integer, db.ForeignKey('user.id'))

class Pet(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(50), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    price = db.Column(db.Float, nullable=False)
    seller_id = db.Column(db.Integer, db.ForeignKey('user.id'))

class Appointment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    vet_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    date = db.Column(db.DateTime, nullable=False)
    status = db.Column(db.String(50), default='scheduled')

# Utils
def role_required(role):
    def wrapper(fn):
        @jwt_required()
        def decorator(*args, **kwargs):
            current_user = get_jwt_identity()
            if current_user['role'] != role:
                return jsonify({'message': 'Access forbidden'}), 403
            return fn(*args, **kwargs)
        decorator.__name__ = fn.__name__
        return decorator
    return wrapper

# Routes
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    if not data or not all(k in data for k in ('username', 'email', 'password', 'role')):
        return jsonify({'message': 'Invalid data'}), 400

    if len(data['password']) < 6:
        return jsonify({'message': 'Password must be at least 6 characters'}), 400

    if User.query.filter_by(email=data['email']).first():
        return jsonify({'message': 'Email already registered'}), 400

    hashed_password = generate_password_hash(data['password'])
    new_user = User(
        username=data['username'],
        email=data['email'],
        password=hashed_password,
        role=data['role']
    )
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User registered successfully'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(email=data['email']).first()
    if user and check_password_hash(user.password, data['password']):
        access_token = create_access_token(identity={
            'id': user.id,
            'username': user.username,
            'role': user.role
        })
        return jsonify({'access_token': access_token}), 200
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/me', methods=['GET'])
@jwt_required()
def get_me():
    current_user = get_jwt_identity()
    return jsonify(current_user)

@app.route('/products', methods=['GET'])
def get_products():
    products = Product.query.all()
    return jsonify([{
        'id': p.id, 'name': p.name, 'description': p.description,
        'price': p.price, 'stock': p.stock, 'seller_id': p.seller_id
    } for p in products])

@app.route('/products/filter', methods=['GET'])
def filter_products():
    name = request.args.get('name')
    products = Product.query.filter(Product.name.ilike(f'%{name}%')).all()
    return jsonify([{
        'id': p.id, 'name': p.name, 'description': p.description,
        'price': p.price, 'stock': p.stock, 'seller_id': p.seller_id
    } for p in products])

@app.route('/products', methods=['POST'])
@role_required('seller')
def add_product():
    data = request.get_json()
    current_user = get_jwt_identity()
    new_product = Product(
        name=data['name'],
        description=data['description'],
        price=data['price'],
        stock=data['stock'],
        seller_id=current_user['id']
    )
    db.session.add(new_product)
    db.session.commit()
    return jsonify({'message': 'Product added'}), 201

@app.route('/buy/<int:product_id>', methods=['POST'])
@role_required('customer')
def buy_product(product_id):
    product = Product.query.get_or_404(product_id)
    if product.stock <= 0:
        return jsonify({'message': 'Product out of stock'}), 400
    current_user = get_jwt_identity()
    user = User.query.get(current_user['id'])
    user.products.append(product)
    product.stock -= 1
    db.session.commit()
    return jsonify({'message': 'Product purchased'}), 200

@app.route('/buy/pet/<int:pet_id>', methods=['POST'])
@role_required('customer')
def buy_pet(pet_id):
    pet = Pet.query.get_or_404(pet_id)
    current_user = get_jwt_identity()
    user = User.query.get(current_user['id'])
    if pet in user.pets:
        return jsonify({'message': 'You already own this pet'}), 400
    user.pets.append(pet)
    db.session.commit()
    return jsonify({'message': 'Pet purchased'}), 200

@app.route('/appointments', methods=['GET'])
@jwt_required()
def get_appointments():
    current_user = get_jwt_identity()
    appointments = Appointment.query.filter_by(user_id=current_user['id']).order_by(Appointment.date.desc()).all()
    return jsonify([{
        'id': a.id,
        'vet_id': a.vet_id,
        'date': a.date.isoformat(),
        'status': a.status
    } for a in appointments])

@app.route('/appointments', methods=['POST'])
@role_required('customer')
def create_appointment():
    data = request.get_json()
    current_user = get_jwt_identity()
    new_appointment = Appointment(
        user_id=current_user['id'],
        vet_id=data['vet_id'],
        date=datetime.fromisoformat(data['date'])
    )
    db.session.add(new_appointment)
    db.session.commit()
    return jsonify({'message': 'Appointment created'}), 201

@app.route('/appointments/<int:id>', methods=['PUT'])
@jwt_required()
def update_appointment(id):
    appointment = Appointment.query.get_or_404(id)
    data = request.get_json()
    current_user = get_jwt_identity()
    if current_user['role'] == 'vet' and appointment.vet_id == current_user['id']:
        appointment.status = data['status']
    elif current_user['role'] == 'customer' and appointment.user_id == current_user['id']:
        if data['status'] == 'cancelled':
            appointment.status = 'cancelled'
        else:
            return jsonify({'message': 'Customers can only cancel appointments'}), 403
    else:
        return jsonify({'message': 'Access denied'}), 403
    db.session.commit()
    return jsonify({'message': 'Appointment updated'}), 200

@app.route('/appointments/<int:id>', methods=['DELETE'])
@jwt_required()
def delete_appointment(id):
    appointment = Appointment.query.get_or_404(id)
    current_user = get_jwt_identity()
    if current_user['role'] == 'admin' or appointment.user_id == current_user['id']:
        db.session.delete(appointment)
        db.session.commit()
        return jsonify({'message': 'Appointment deleted'}), 200
    return jsonify({'message': 'Access denied'}), 403

# CLI for DB init
@app.cli.command('init-db')
def init_db():
    db.create_all()
    print("Database initialized.")

if __name__ == '__main__':
    app.run(debug=True)
