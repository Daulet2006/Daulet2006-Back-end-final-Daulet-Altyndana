# Импорт модулей
from flask import Blueprint, jsonify, request, current_app
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..models import Pet, Role
from .. import db
from ..utils import role_required
import logging
import os
import uuid
from werkzeug.utils import secure_filename

# Разрешённые расширения файлов
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Blueprint для маршрутов питомцев
bp = Blueprint('pets', __name__, url_prefix='/pets')

# Проверка расширения файла
def allowed_file(filename):
    """Проверяет, допустимое ли расширение файла."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Форматирование данных питомца
def format_pet(pet):
    """Преобразует объект Pet в словарь для API."""
    return {
        'id': pet.id,
        'name': pet.name,
        'species': pet.species,
        'breed': pet.breed,
        'age': pet.age,
        'price': pet.price,
        'description': pet.description,
        'image_url': pet.image_url,
        'seller_id': pet.seller_id
    }

# Проверка авторизации
def check_pet_authorization(pet, current_user_identity):
    """Проверяет, может ли пользователь изменять питомца."""
    current_user_id = current_user_identity['id']
    role_str = current_user_identity.get('role', '')
    try:
        current_user_role = Role(role_str)
    except ValueError:
        logger.error(f"Недопустимая роль: {role_str}")
        return False, "Недопустимая роль"

    if current_user_role in [Role.ADMIN, Role.OWNER] or pet.seller_id == current_user_id:
        return True, None
    return False, "Нет прав для изменения питомца"

# Создание питомца
@bp.route('', methods=['POST'])
@jwt_required()
@role_required(Role.SELLER, Role.ADMIN, Role.OWNER)
def create_pet():
    """Создаёт питомца, сохраняет файл изображения и путь в БД."""
    current_user_identity = get_jwt_identity()

    # Проверка файла
    if 'image' not in request.files:
        return jsonify({'message': 'Требуется файл изображения'}), 400
    image = request.files['image']
    if image.filename == '' or not allowed_file(image.filename):
        return jsonify({'message': 'Недопустимый файл'}), 400

    # Сохранение файла
    filename = secure_filename(image.filename)
    unique_name = f"{uuid.uuid4().hex}_{filename}"
    save_path = os.path.join(current_app.config['UPLOAD_FOLDER'], unique_name)
    os.makedirs(current_app.config['UPLOAD_FOLDER'], exist_ok=True)
    image.save(save_path)
    image_url = f"/static/Uploads/{unique_name}"

    # Получение данных
    try:
        new_pet = Pet(
            name=request.form.get('name', ''),
            species=request.form.get('species', ''),
            breed=request.form.get('breed', ''),
            age=int(request.form.get('age', 0)),
            price=float(request.form.get('price', 0.0)),
            description=request.form.get('description', ''),
            image_url=image_url,
            seller_id=current_user_identity['id']
        )
        db.session.add(new_pet)
        db.session.commit()
        return jsonify({'message': 'Питомец создан', 'pet_id': new_pet.id}), 201
    except Exception as e:
        db.session.rollback()
        logger.error(f"Ошибка создания питомца: {e}")
        return jsonify({'message': 'Ошибка создания питомца', 'error': str(e)}), 500

# Получение всех питомцев
@bp.route('', methods=['GET'])
def get_pets():
    """Возвращает список всех питомцев."""
    try:
        pets = Pet.query.all()
        return jsonify([format_pet(p) for p in pets]), 200
    except Exception as e:
        logger.error(f"Ошибка получения питомцев: {e}")
        return jsonify({'message': 'Ошибка получения питомцев', 'error': str(e)}), 500

# Получение одного питомца
@bp.route('/<int:pet_id>', methods=['GET'])
def get_pet(pet_id):
    """Возвращает данные питомца по ID."""
    try:
        pet = Pet.query.get_or_404(pet_id)
        return jsonify(format_pet(pet)), 200
    except Exception as e:
        logger.error(f"Ошибка получения питомца {pet_id}: {e}")
        return jsonify({'message': 'Ошибка получения питомца', 'error': str(e)}), 500

# Обновление питомца
@bp.route('/<int:pet_id>', methods=['PUT', 'PATCH'])
@jwt_required()
@role_required(Role.SELLER, Role.ADMIN, Role.OWNER)
def update_pet(pet_id):
    """Обновляет питомца, включая замену изображения."""
    current_user_identity = get_jwt_identity()
    try:
        pet = Pet.query.get_or_404(pet_id)
        authorized, error_message = check_pet_authorization(pet, current_user_identity)
        if not authorized:
            return jsonify({'message': error_message}), 403

        # Обновление полей
        if 'name' in request.form:
            pet.name = request.form['name']
        if 'species' in request.form:
            pet.species = request.form['species']
        if 'breed' in request.form:
            pet.breed = request.form['breed']
        if 'age' in request.form:
            pet.age = int(request.form['age'])
        if 'price' in request.form:
            pet.price = float(request.form['price'])
        if 'description' in request.form:
            pet.description = request.form['description']

        # Обработка изображения
        if 'image' in request.files:
            image = request.files['image']
            if image.filename == '' or not allowed_file(image.filename):
                return jsonify({'message': 'Недопустимый файл'}), 400
            if pet.image_url:
                old_path = os.path.join(current_app.root_path, pet.image_url.strip("/"))
                if os.path.exists(old_path):
                    os.remove(old_path)
            filename = f"{uuid.uuid4().hex}_{secure_filename(image.filename)}"
            upload_path = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
            os.makedirs(current_app.config['UPLOAD_FOLDER'], exist_ok=True)
            image.save(upload_path)
            pet.image_url = f"/static/Uploads/{filename}"

        db.session.commit()
        return jsonify({'message': 'Питомец обновлён', 'pet': format_pet(pet)}), 200
    except Exception as e:
        db.session.rollback()
        logger.error(f"Ошибка обновления питомца {pet_id}: {e}")
        return jsonify({'message': 'Ошибка обновления питомца', 'error': str(e)}), 500

# Удаление питомца
@bp.route('/<int:pet_id>', methods=['DELETE'])
@jwt_required()
@role_required(Role.SELLER, Role.ADMIN, Role.OWNER)
def delete_pet(pet_id):
    """Удаляет питомца по ID."""
    current_user_identity = get_jwt_identity()
    try:
        pet = Pet.query.get_or_404(pet_id)
        authorized, error_message = check_pet_authorization(pet, current_user_identity)
        if not authorized:
            return jsonify({'message': error_message}), 403
        db.session.delete(pet)
        db.session.commit()
        return jsonify({'message': 'Питомец удалён'}), 200
    except Exception as e:
        db.session.rollback()
        logger.error(f"Ошибка удаления питомца {pet_id}: {e}")
        return jsonify({'message': 'Ошибка удаления питомца', 'error': str(e)}), 500