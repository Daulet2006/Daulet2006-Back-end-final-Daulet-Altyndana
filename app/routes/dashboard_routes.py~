from flask_restx import Namespace, Resource
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..models import Order, Product, Pet, User, Role
from ..utils import role_required
from .. import db
from sqlalchemy import func
from datetime import datetime, timedelta
from sqlalchemy.orm import joinedload
from sqlalchemy.exc import SQLAlchemyError

dashboard_ns = Namespace('dashboard', description='Статистика для дашборда')

@dashboard_ns.route('/stats')
class DashboardStats(Resource):
    @jwt_required()
    @role_required(Role.ADMIN, Role.OWNER)
    def get(self):
        try:
            total_orders = Order.query.count()
            total_products = Product.query.count()
            total_pets = Pet.query.count()
            total_users = User.query.count()
            pending_orders = Order.query.filter_by(status='Pending').count()
            completed_orders = Order.query.filter_by(status='Completed').count()
            cancelled_orders = Order.query.filter_by(status='Cancelled').count()
            week_ago = datetime.utcnow() - timedelta(days=7)
            recent_orders = Order.query.filter(Order.order_date >= week_ago).count()
            users_by_role = {role.value: User.query.filter_by(role=role).count() for role in Role}
            total_revenue = db.session.query(func.sum(Order.total_amount)).filter_by(status='Completed').scalar() or 0

            return {
                'total_orders': total_orders,
                'total_products': total_products,
                'total_pets': total_pets,
                'total_users': total_users,
                'orders_by_status': {
                    'pending': pending_orders,
                    'completed': completed_orders,
                    'cancelled': cancelled_orders
                },
                'recent_orders': recent_orders,
                'users_by_role': users_by_role,
                'total_revenue': float(total_revenue)
            }, 200
        except SQLAlchemyError:
            return {'message': 'Ошибка базы данных', 'code': 'DATABASE_ERROR'}, 500
        except Exception:
            return {'message': 'Ошибка получения статистики', 'code': 'INTERNAL_ERROR'}, 500

@dashboard_ns.route('/recent-orders')
class RecentOrders(Resource):
    @jwt_required()
    @role_required(Role.ADMIN, Role.OWNER, Role.SELLER)
    def get(self):
        try:
            current_user = get_jwt_identity()
            thirty_days_ago = datetime.utcnow() - timedelta(days=30)
            query = Order.query.filter(Order.order_date >= thirty_days_ago)

            if current_user['role'] == Role.SELLER.value:
                query = query.join(Order.products).filter(Product.seller_id == current_user['id'])

            recent_orders = query.options(joinedload(Order.client)).order_by(Order.order_date.desc()).limit(10).all()

            return [{
                'id': order.id,
                'client_name': order.client.username if order.client else 'Неизвестно',
                'order_date': order.order_date.isoformat(),
                'total_amount': order.total_amount,
                'status': order.status
            } for order in recent_orders], 200
        except SQLAlchemyError:
            return {'message': 'Ошибка базы данных', 'code': 'DATABASE_ERROR'}, 500
        except Exception:
            return {'message': 'Ошибка получения заказов', 'code': 'INTERNAL_ERROR'}, 500