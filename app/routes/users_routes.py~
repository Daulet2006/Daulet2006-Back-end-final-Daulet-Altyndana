from flask_restx import Namespace, Resource, fields
from flask import request
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..models import User, Role
from .. import db
from ..utils import role_required
from ..role_utils import get_user_data_with_permissions

users_ns = Namespace('users', description='Operations related to users')

# Swagger model
user_model = users_ns.model('User', {
    'username': fields.String(description='User username'),
    'email': fields.String(description='User email'),
    'role': fields.String(description='User role')
})

@users_ns.route('')
class UserList(Resource):
    @jwt_required()
    @role_required(Role.OWNER)
    def get(self):
        """Get all users"""
        users = User.query.all()
        return [get_user_data_with_permissions(u) for u in users], 200

@users_ns.route('/<int:user_id>')
class UserResource(Resource):
    @jwt_required()
    @role_required(Role.OWNER)
    def get(self, user_id):
        """Get a user by ID"""
        user = User.query.get_or_404(user_id)
        return get_user_data_with_permissions(user), 200

    @jwt_required()
    @role_required(Role.OWNER)
    @users_ns.expect(user_model)
    def put(self, user_id):
        """Update a user"""
        user = User.query.get_or_404(user_id)
        data = request.get_json()
        allowed_fields = ['username', 'email', 'role']
        updated = False

        if not data:
            return {'message': 'No data provided'}, 400

        if 'username' in data:
            user.username = data['username']
            updated = True
        if 'email' in data:
            user.email = data['email']
            updated = True
        if 'role' in data:
            try:
                user.role = Role(data['role'])
                updated = True
            except ValueError:
                return {'message': f'Invalid role. Valid roles: {[r.value for r in Role]}'}, 400

        if not updated:
            return {'message': 'No valid fields to update'}, 400

        db.session.commit()
        return {'message': 'User updated successfully', 'user': get_user_data_with_permissions(user)}, 200

    @jwt_required()
    @role_required(Role.OWNER)
    def delete(self, user_id):
        """Delete a user"""
        current_user_id = get_jwt_identity().get('id')
        if user_id == current_user_id:
            return {'message': 'You cannot delete your own account.'}, 400
        user = User.query.get_or_404(user_id)
        db.session.delete(user)
        db.session.commit()
        return {'message': 'User deleted successfully'}, 200

