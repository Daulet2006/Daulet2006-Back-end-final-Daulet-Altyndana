from flask_restx import Namespace, Resource, fields, reqparse
from flask import send_from_directory, current_app
from flask_jwt_extended import jwt_required, get_jwt_identity
from werkzeug.utils import secure_filename
from openai import OpenAI
from dotenv import load_dotenv
import os
import uuid
import base64
from datetime import datetime
from app import db
from app.models.chat_model import ChatMessage
from app.models.product_model import Product
from app.models.pet_model import Pet, PetStatus
from app.models.category_model import Category
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=api_key)

# –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω
chat_ns = Namespace('chat', description='Chat with AI assistant')

ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx'}

file_model = chat_ns.model('File', {
    'name': fields.String(),
    'path': fields.String(),
    'type': fields.String()
})

chat_response_model = chat_ns.model('ChatResponse', {
    'id': fields.Integer(),
    'message': fields.String(),
    'reply': fields.String(),
    'timestamp': fields.String(),
    'file': fields.Nested(file_model, required=False)
})

chat_parser = reqparse.RequestParser()
chat_parser.add_argument('message', type=str, required=True, help='User message cannot be blank')
chat_parser.add_argument('file', type=reqparse.FileStorage, location='files')

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def extract_context(message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context = ""
    message_lower = message.lower()

    product_keywords = ["–∫–æ—Ä–º", "—Ç–æ–≤–∞—Ä", "—Ç–æ–≤–∞—Ä—ã", "—Ü–µ–Ω–∞", "–ø—Ä–æ–¥—É–∫—Ç", "–ø—Ä–æ–¥—É–∫—Ç—ã"]
    pet_keywords = ["—Å–æ–±–∞–∫–∞", "—Å–æ–±–∞–∫–∏", "–∫–æ—à–∫–∞", "–∫–æ—à–∫–∏", "–∂–∏–≤–æ—Ç–Ω–æ–µ", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "–ø–∏—Ç–æ–º–µ—Ü", "–ø–∏—Ç–æ–º—Ü—ã"]

    if any(k in message_lower for k in product_keywords):
        products = Product.query.join(Category).limit(10).all()
        context += "\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        for product in products:
            context += f"- {product.name} ({product.category.name}) ‚Äî {product.price} —Ä—É–±., –í –Ω–∞–ª–∏—á–∏–∏: {product.stock}\n"

    if any(k in message_lower for k in pet_keywords):
        pets = Pet.query.filter_by(status=PetStatus.AVAILABLE.value).limit(10).all()
        context += "\nüêæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ:\n"
        for pet in pets:
            context += f"- {pet.name} ({pet.species}, –ü–æ—Ä–æ–¥–∞: {pet.breed}) ‚Äî {pet.price} —Ä—É–±.\n"

    return context

def get_ai_reply(message, user_id, file_path=None):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        recent_messages = ChatMessage.query.filter_by(user_id=user_id).order_by(
            ChatMessage.timestamp.desc()
        ).limit(5).all()

        chat_history = "\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
        for msg in reversed(recent_messages):
            chat_history += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.message}\n–ò–ò: {msg.reply}\n"

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = extract_context(message)

        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞. "
                    "–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞—è —Å–ª–æ–≤–æ '–∫–æ–Ω—Ç–µ–∫—Å—Ç'. "
                    "–í–∞–ª—é—Ç–∞ –≤ KZT. "
                )
            },
            {
                "role": "user",
                "content": f"{chat_history}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}"
            }
        ]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if file_path and file_path.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg', 'gif'}:
            full_path = os.path.join(current_app.config['UPLOAD_FOLDER'], file_path)
            if os.path.exists(full_path):
                with open(full_path, "rb") as image_file:
                    image_data = base64.b64encode(image_file.read()).decode('utf-8')
                    messages.append({
                        "role": "user",
                        "content": [
                            {"type": "text", "text": message},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_data}"}}
                        ]
                    })
            else:
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=200,
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()
        logger.info(f"AI –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reply}")
        return reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {str(e)}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@chat_ns.route('')
class ChatMessageResource(Resource):
    @jwt_required()
    @chat_ns.expect(chat_parser)
    @chat_ns.marshal_with(chat_response_model, code=201)
    def post(self):
        user_identity = get_jwt_identity()
        user_id = user_identity['id']
        args = chat_parser.parse_args()
        user_message = args['message']
        file = args['file']

        file_path = file_name = file_type = None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        if file and file.filename and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            unique_name = f"{uuid.uuid4()}_{filename}"
            upload_dir = current_app.config['UPLOAD_FOLDER']
            os.makedirs(upload_dir, exist_ok=True)
            full_path = os.path.join(upload_dir, unique_name)
            file.save(full_path)
            file_path = unique_name
            file_name = filename
            file_type = file.content_type
            logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_name} –∫–∞–∫ {file_path}")

        # –û—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_reply = get_ai_reply(user_message, user_id, file_path)

        new_msg = ChatMessage(
            user_id=user_id,
            message=user_message,
            reply=ai_reply,
            timestamp=datetime.utcnow(),
            file_path=file_path,
            file_name=file_name,
            file_type=file_type
        )

        try:
            db.session.add(new_msg)
            db.session.commit()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, ID: {new_msg.id}")
        except Exception as e:
            db.session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return {'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'}, 500

        result = {
            'id': new_msg.id,
            'message': new_msg.message,
            'reply': new_msg.reply,
            'timestamp': new_msg.timestamp.isoformat()
        }
        if file_path:
            result['file'] = {
                'name': file_name,
                'path': file_path,
                'type': file_type
            }

        return result, 201

@chat_ns.route('/history')
class ChatHistoryResource(Resource):
    @jwt_required()
    @chat_ns.marshal_list_with(chat_response_model)
    def get(self):
        user_identity = get_jwt_identity()
        user_id = user_identity['id']
        messages = ChatMessage.query.filter_by(user_id=user_id).order_by(ChatMessage.timestamp).all()
        result = []
        for msg in messages:
            msg_data = {
                'id': msg.id,
                'message': msg.message,
                'reply': msg.reply,
                'timestamp': msg.timestamp.isoformat()
            }
            if msg.file_path:
                msg_data['file'] = {
                    'name': msg.file_name,
                    'path': msg.file_path,
                    'type': msg.file_type
                }
            result.append(msg_data)

        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ‚Äî {len(result)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return result, 200

@chat_ns.route('/files/<path:filename>')
class ChatFileResource(Resource):
    def get(self, filename):
        file_path = os.path.join(os.path.abspath(current_app.config['UPLOAD_FOLDER']), filename)
        if not os.path.exists(file_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return {'message': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}, 404
        logger.info(f"–û—Ç–¥–∞—ë—Ç—Å—è —Ñ–∞–π–ª: {filename}")
        return send_from_directory(os.path.abspath(current_app.config['UPLOAD_FOLDER']), filename)

@chat_ns.route('/files/<path:filename>')