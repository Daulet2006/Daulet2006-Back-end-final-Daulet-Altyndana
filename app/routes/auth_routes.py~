from flask_restx import Namespace, Resource, fields
from flask import request, jsonify
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity, unset_jwt_cookies
from ..models import User, Role
from .. import db, bcrypt
from ..role_utils import get_user_data_with_permissions
from sqlalchemy.exc import IntegrityError
import datetime

auth_ns = Namespace('auth', description='Authentication operations', tags=['Authentication'])
register_model = auth_ns.model('Register', {
    'username': fields.String(required=True, description='User username'),
    'email': fields.String(required=True, description='User email'),
    'password': fields.String(required=True, description='User password'),
    'role': fields.String(required=True, description='User role')
})

login_model = auth_ns.model('Login', {
    'email': fields.String(required=True, description='User email'),
    'password': fields.String(required=True, description='User password')
})

@auth_ns.route('/register')
class Register(Resource):
    @auth_ns.expect(register_model)
    def post(self):
        """Register a new user"""
        data = request.get_json()
        if not all(k in data for k in ('username', 'email', 'password', 'role')):
            return {'message': 'Invalid data. Ensure you provide username, email, password, and role.'}, 400

        if User.query.filter_by(email=data['email']).first():
            return {'message': 'Email already registered. Please try logging in or use a different email.'}, 400

        if User.query.filter_by(username=data['username']).first():
            return {'message': 'Username already taken. Please choose a different username.'}, 400

        role_value = data['role']
        role_enum = None
        for role in Role:
            if role.value == role_value:
                role_enum = role
                break

        if not role_enum:
            return {'message': f'Invalid role: {role_value}. Valid roles: {[r.value for r in Role]}'}, 400

        new_user = User(
            username=data['username'],
            email=data['email'],
            password=bcrypt.generate_password_hash(data['password']).decode('utf-8'),
            role=role_enum
        )

        try:
            db.session.add(new_user)
            db.session.commit()
        except IntegrityError as e:
            db.session.rollback()
            error_message = str(e.orig) if e.orig else 'Database integrity error'
            return {'message': f'Failed to register user: {error_message}. Please try again.'}, 500

        access_token = create_access_token(identity={
            'id': new_user.id,
            'username': new_user.username,
            'role': new_user.role.value
        }, expires_delta=datetime.timedelta(days=1))

        user_data = get_user_data_with_permissions(new_user)

        return {
            'message': 'User registered and logged in successfully.',
            'access_token': access_token,
            'user': user_data
        }, 201

@auth_ns.route('/login')
class Login(Resource):
    @auth_ns.expect(login_model)
    def post(self):
        """Login a user"""
        data = request.get_json()
        user = User.query.filter_by(email=data['email']).first()

        if not user:
            return {'message': 'User not found. Please check your email.'}, 404

        if user.isBanned:
            return {'message': 'Your account has been banned. Please contact support.'}, 403

        if user and bcrypt.check_password_hash(user.password, data['password']):
            access_token = create_access_token(identity={
                'id': user.id,
                'username': user.username,
                'role': user.role.value
            }, expires_delta=datetime.timedelta(days=1))

            user_data = get_user_data_with_permissions(user)

            return {
                'message': 'Login successful.',
                'access_token': access_token,
                'user': user_data
            }, 200

        return {'message': 'Invalid credentials. Please check your email and password.'}, 401

@auth_ns.route('/logout')
class Logout(Resource):
    @jwt_required()
    def post(self):
        """Logout a user"""
        response = jsonify({'message': 'Successfully logged out.'})
        unset_jwt_cookies(response)
        return response